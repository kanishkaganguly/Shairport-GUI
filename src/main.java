import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kanishka
 */
public class main extends javax.swing.JFrame {

    String str = "";
    String artist_send = "";

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    public static void systray() {
        TrayIcon trayIcon = null;
        if (SystemTray.isSupported()) {
            // get the SystemTray instance
            SystemTray tray = SystemTray.getSystemTray();
            // load an image
            Image image = Toolkit.getDefaultToolkit().getImage("airplay.gif");
            // create a action listener to listen for default action executed on the tray icon
            ActionListener nowplayinglistener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(null, "Hey, you activated me!");
                }
            };
            ActionListener exitlistener = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            };
            // create a popup menu
            PopupMenu popup = new PopupMenu();
            // create menu item for the default action
            MenuItem now_playing = new MenuItem("Now Playing");
            now_playing.addActionListener(nowplayinglistener);
            popup.add(now_playing);

            MenuItem exit_btn = new MenuItem("Exit");
            exit_btn.addActionListener(exitlistener);
            popup.add(exit_btn);

            // construct a TrayIcon
            trayIcon = new TrayIcon(image, "Shairport GUI", popup);
            trayIcon.addActionListener(nowplayinglistener);
            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                System.err.println(e);
            }
        } else {
            System.out.println("NOT SUPPORTED");
        }
        if (trayIcon != null) {
            Image image = Toolkit.getDefaultToolkit().getImage("airplay.gif");
            trayIcon.setImage(image);
        }
    }

    public void func(final String str, final int key) {
        SwingUtilities.invokeLater(
                new Runnable() {
                    public void run() {
                        switch (key) {
                            case 1:
                                title_out.setText(str);
                                break;
                            case 2:
                                artist_out.setText(str);
                                break;
                            case 3:
                                album_out.setText(str);
                                break;
                            case 4:
                                genre_out.setText(str);
                                break;
                            case 5:
                                comment_out.setText(str);
                                break;
                            case 6:
                                String url = "/home/kanishka/Desktop/metadata/" + str;
                                BufferedImage img = null;
                                try {
                                    img = ImageIO.read(new File(url));
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                                Image dimg = img.getScaledInstance(cover_art.getWidth(), cover_art.getHeight(), Image.SCALE_SMOOTH);
                                ImageIcon imageIcon = new ImageIcon(dimg);
                                cover_art.setIcon(imageIcon);
                                break;

                        }

                    }
                }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heading = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        cover_art = new javax.swing.JLabel();
        playing_panel = new javax.swing.JPanel();
        title_lbl = new javax.swing.JLabel();
        artist_lbl = new javax.swing.JLabel();
        album_lbl = new javax.swing.JLabel();
        genre_lbl = new javax.swing.JLabel();
        comment_lbl = new javax.swing.JLabel();
        title_out = new javax.swing.JLabel();
        artist_out = new javax.swing.JLabel();
        genre_out = new javax.swing.JLabel();
        album_out = new javax.swing.JLabel();
        comment_out = new javax.swing.JLabel();
        start_btn = new javax.swing.JButton();
        exit_btn = new javax.swing.JButton();
        status_panel = new javax.swing.JPanel();
        status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shairport GUI");

        heading.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heading.setText("Shairport GUI");

        cover_art.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cover_art.setText("Cover Art");
        cover_art.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        playing_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Now Playing"));

        title_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        title_lbl.setText("Title");

        artist_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        artist_lbl.setText("Artist");

        album_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        album_lbl.setText("Album");

        genre_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        genre_lbl.setText("Genre");

        comment_lbl.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        comment_lbl.setText("Comment");

        title_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        artist_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        artist_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        genre_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        genre_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        album_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        album_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        comment_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comment_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout playing_panelLayout = new javax.swing.GroupLayout(playing_panel);
        playing_panel.setLayout(playing_panelLayout);
        playing_panelLayout.setHorizontalGroup(
            playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playing_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title_lbl)
                    .addComponent(album_lbl)
                    .addComponent(genre_lbl)
                    .addComponent(comment_lbl)
                    .addComponent(artist_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(title_out, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artist_out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comment_out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genre_out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(album_out, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
        );

        playing_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {album_out, comment_out, genre_out, title_out});

        playing_panelLayout.setVerticalGroup(
            playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playing_panelLayout.createSequentialGroup()
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(title_out, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(title_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(artist_lbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(artist_out, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(album_out, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(album_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genre_out, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genre_lbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(playing_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comment_out, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comment_lbl))
                .addContainerGap())
        );

        playing_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {album_out, artist_out, comment_out, genre_out, title_out});

        start_btn.setText("START SHAIRPORT");
        start_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                start_btnMouseClicked(evt);
            }
        });

        exit_btn.setText("EXIT SHAIRPORT");
        exit_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_btnMouseClicked(evt);
            }
        });

        status_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shairport Status"));

        status.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout status_panelLayout = new javax.swing.GroupLayout(status_panel);
        status_panel.setLayout(status_panelLayout);
        status_panelLayout.setHorizontalGroup(
            status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        status_panelLayout.setVerticalGroup(
            status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(start_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exit_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cover_art, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playing_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cover_art, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playing_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start_btn)
                    .addComponent(exit_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_start_btnMouseClicked
        processthread();

        status.setText("Started Shairport. Listening for connections...");

        metadata();

    }//GEN-LAST:event_start_btnMouseClicked

    private void exit_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_btnMouseClicked
        try {
            Runtime.getRuntime().exec("killall shairport");
        } catch (Exception e) {

        }
        System.exit(0);
    }//GEN-LAST:event_exit_btnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
                systray();
            }
        });
    }

    public void processthread() {
        new Thread(new Runnable() {
            public void run() {
                try {
                    Runtime.getRuntime().exec("/home/kanishka/NetBeansProjects/ShairportGUI/src/shell.sh");
                } catch (IOException e) {
                    System.out.println(e);
                }
            }
        }).start();
    }

    public void metadata() {
        new Thread(new Runnable() {
            public void run() {
                BufferedReader br = null;

                try {
                    br = new BufferedReader(new FileReader("/home/kanishka/Desktop/metadata/now_playing"));
                    while ((str = br.readLine()) != null) {
                        if (str.startsWith("artist=")) {
                            artist_send = str.substring(7);
                            func(artist_send, 2);
                        }
                        if (str.startsWith("title=")) {
                            artist_send = str.substring(6);
                            func(artist_send, 1);
                        }
                        if (str.startsWith("album=")) {
                            artist_send = str.substring(6);
                            func(artist_send, 3);
                        }
                        if (str.startsWith("artwork=")) {
                            artist_send = str.substring(8);
                            func(artist_send, 6);
                        }
                        if (str.startsWith("genre=")) {
                            artist_send = str.substring(6);
                            func(artist_send, 4);
                        }
                        if (str.startsWith("comment=")) {
                            artist_send = str.substring(8);
                            func(artist_send, 5);
                        }

                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }).start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel album_lbl;
    private javax.swing.JLabel album_out;
    private javax.swing.JLabel artist_lbl;
    private javax.swing.JLabel artist_out;
    private javax.swing.JLabel comment_lbl;
    private javax.swing.JLabel comment_out;
    private javax.swing.JLabel cover_art;
    private javax.swing.JButton exit_btn;
    private javax.swing.JLabel genre_lbl;
    private javax.swing.JLabel genre_out;
    private javax.swing.JLabel heading;
    private javax.swing.JPanel playing_panel;
    private javax.swing.JSeparator separator;
    private javax.swing.JButton start_btn;
    private javax.swing.JLabel status;
    private javax.swing.JPanel status_panel;
    private javax.swing.JLabel title_lbl;
    private javax.swing.JLabel title_out;
    // End of variables declaration//GEN-END:variables

}

class Metadata implements Runnable {

    private Thread t;
    private final String threadName;
    public String artist_send = "abcd";
    static String str;

    Metadata(String name) {
        threadName = name;

    }

    @Override
    public void run() {

    }

    public void start() {

        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }
}

class ProcessThread implements Runnable {

    private Thread t;
    private final String threadName;

    ProcessThread(String name) {
        threadName = name;
    }

    @Override
    public void run() {
        try {
            String path = Paths.get(".").toAbsolutePath().normalize().toString();
            Runtime.getRuntime().exec(path + "/src/shell.sh");
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    public void start() {
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }

}
